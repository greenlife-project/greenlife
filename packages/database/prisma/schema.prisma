generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  phone            String    @unique
  phoneVerificated Boolean   @default(false)
  first_name       String
  last_name        String
  payments         Payment[]
  likes            Like[]
  posts            Post[]
  comments         Comment[]
  password         String
  recovery         RecoveryToken?
  token            VerificationToken?
}

model RecoveryToken {
  id         String   @id @default(cuid())
  token      String   @unique
  expires    DateTime
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([id, token])
}

model VerificationToken {
  id         String   @id @default(cuid())
  token      String   @unique
  expires    DateTime
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([id, token])
}

//Shop

model Payment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paid      Boolean  @default(false)
}

model Item {
  id        String   @id @default(cuid())
  created DateTime @default(now())
  title       String @db.VarChar(200)
  description String @db.VarChar(2000)
  updated DateTime?
  price   Int
  Comment CommentShop[]

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model CommentShop {
  id      String   @id @default(cuid())
  created DateTime @default(now())
  text String      @db.VarChar(200)
  post   Post      @relation(fields: [postId], references: [id])
  postId String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  @@index([postId])
}


//Forum

model Post {
  id      String   @id @default(cuid())
  created DateTime @default(now())
  title       String @db.VarChar(200)
  description String @db.VarChar(2000)
  updated DateTime?
  Comment Comment[]
  tags    Tag[]
  likes Like[]

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  @@index([userId])
}


model Comment {
  id      String   @id @default(cuid())
  created DateTime @default(now())
  text String      @db.VarChar(200)
  post   Post      @relation(fields: [postId], references: [id])
  postId String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  @@index([postId])
}

model Like {
  id      String   @id @default(cuid())
  created DateTime @default(now())
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  @@unique([postId, userId])
}

model Tag {
  tagName String @db.VarChar(20)
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  @@unique([postId, tagName])
}

